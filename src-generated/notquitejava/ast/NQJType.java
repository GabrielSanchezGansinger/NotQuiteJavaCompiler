//generated by abstract-syntax-gen
package notquitejava.ast;
import java.util.*;

public interface NQJType extends NQJElement{
    NQJElement getParent();
    <T> T match(Matcher<T> s);
    void match(MatcherVoid s);
    public interface Matcher<T> {
        T case_TypeClass(NQJTypeClass typeClass);
        T case_TypeInt(NQJTypeInt typeInt);
        T case_TypeBool(NQJTypeBool typeBool);
        T case_TypeArray(NQJTypeArray typeArray);
    }

    public interface MatcherVoid {
        void case_TypeClass(NQJTypeClass typeClass);
        void case_TypeInt(NQJTypeInt typeInt);
        void case_TypeBool(NQJTypeBool typeBool);
        void case_TypeArray(NQJTypeArray typeArray);
    }

    NQJType copy();
    NQJType copyWithRefs();
    /** "information about the source code"*/
    public abstract frontend.SourcePosition getSourcePosition();
    /** "information about the source code"*/
    public abstract void setSourcePosition(frontend.SourcePosition sourcePosition);
    /** null*/
    public abstract analysis.Type getType();
    /** null*/
    public abstract void setType(analysis.Type type);
}


//----------------------------------------------------
// The following code was generated by CUP v0.11c 20160501
//----------------------------------------------------

package notquitejava.syntax;

import notquitejava.ast.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import frontend.SyntaxError;
import frontend.AstHelper;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import static notquitejava.ast.NQJ.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11c 20160501 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class NotQuiteJavaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return NotQuiteJavaParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public NotQuiteJavaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public NotQuiteJavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public NotQuiteJavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\006\007\000\002\007\004\000" +
    "\002\007\002\000\002\010\010\000\002\005\007\000\002" +
    "\005\011\000\002\005\011\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\004\000\002\012\002" +
    "\000\002\013\004\000\002\014\010\000\002\015\004\000" +
    "\002\015\002\000\002\016\005\000\002\016\002\000\002" +
    "\033\004\000\002\033\002\000\002\034\005\000\002\034" +
    "\002\000\002\020\003\000\002\020\003\000\002\017\004" +
    "\000\002\017\004\000\002\021\004\000\002\021\002\000" +
    "\002\022\006\000\002\022\002\000\002\023\005\000\002" +
    "\025\004\000\002\025\002\000\002\026\003\000\002\026" +
    "\004\000\002\024\003\000\002\024\011\000\002\024\007" +
    "\000\002\024\005\000\002\024\004\000\002\024\006\000" +
    "\002\024\004\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\004\000\002\027\004" +
    "\000\002\027\006\000\002\027\003\000\002\030\006\000" +
    "\002\030\010\000\002\030\003\000\002\031\005\000\002" +
    "\031\010\000\002\031\006\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\005\000\002\031\003\000\002\032\006\000" +
    "\002\032\003\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\034\002\ufffe\010\027\017\020\023\017\045" +
    "\006\052\026\055\004\102\014\121\012\122\024\123\032" +
    "\124\022\125\016\001\002\000\004\125\220\001\002\000" +
    "\034\002\ufffc\010\ufffc\017\ufffc\023\ufffc\045\ufffc\052\ufffc" +
    "\055\ufffc\102\ufffc\121\ufffc\122\ufffc\123\ufffc\124\ufffc\125" +
    "\ufffc\001\002\000\040\077\uffe3\100\uffe3\101\uffe3\103\uffe3" +
    "\104\uffe3\105\uffe3\106\uffe3\111\uffe3\112\uffe3\113\uffe3\114" +
    "\uffe3\115\uffe3\116\uffe3\117\uffe3\125\uffe3\001\002\000\004" +
    "\125\152\001\002\000\034\002\ufffd\010\ufffd\017\ufffd\023" +
    "\ufffd\045\ufffd\052\ufffd\055\ufffd\102\ufffd\121\ufffd\122\ufffd" +
    "\123\ufffd\124\ufffd\125\ufffd\001\002\000\034\002\ufffb\010" +
    "\ufffb\017\ufffb\023\ufffb\045\ufffb\052\ufffb\055\ufffb\102\ufffb" +
    "\121\ufffb\122\ufffb\123\ufffb\124\ufffb\125\ufffb\001\002\000" +
    "\034\077\uffbf\100\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf" +
    "\111\uffbf\112\uffbf\113\uffbf\114\uffbf\115\uffbf\116\uffbf\117" +
    "\uffbf\001\002\000\012\077\uffb9\101\110\104\uffb9\125\uffdf" +
    "\001\002\000\026\010\027\023\017\102\014\110\045\113" +
    "\037\121\012\122\024\123\032\124\022\125\043\001\002" +
    "\000\004\002\146\001\002\000\012\077\uffb7\101\uffb7\104" +
    "\uffb7\125\uffb7\001\002\000\034\077\uffbc\100\uffbc\103\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\111\uffbc\112\uffbc\113\uffbc\114" +
    "\uffbc\115\uffbc\116\uffbc\117\uffbc\001\002\000\040\077\uffe4" +
    "\100\uffe4\101\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\111" +
    "\uffe4\112\uffe4\113\uffe4\114\uffe4\115\uffe4\116\uffe4\117\uffe4" +
    "\125\uffe4\001\002\000\006\101\110\125\uffdf\001\002\000" +
    "\034\077\uffbd\100\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115\uffbd\116\uffbd\117" +
    "\uffbd\001\002\000\004\002\001\001\002\000\034\077\uffbe" +
    "\100\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\111\uffbe\112" +
    "\uffbe\113\uffbe\114\uffbe\115\uffbe\116\uffbe\117\uffbe\001\002" +
    "\000\034\002\ufffe\010\027\017\020\023\017\045\006\052" +
    "\026\055\004\102\014\121\012\122\024\123\032\124\022" +
    "\125\016\001\002\000\004\125\121\001\002\000\010\017" +
    "\020\045\006\125\101\001\002\000\034\077\076\100\uffc3" +
    "\103\uffc3\104\uffc3\105\uffc3\106\uffc3\111\uffc3\112\uffc3\113" +
    "\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3\001\002\000\004" +
    "\104\033\001\002\000\034\077\uffbb\100\uffbb\103\uffbb\104" +
    "\uffbb\105\uffbb\106\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb" +
    "\115\uffbb\116\uffbb\117\uffbb\001\002\000\006\071\035\125" +
    "\034\001\002\000\044\077\uffb6\100\uffb6\101\uffb6\102\036" +
    "\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\111\uffb6\112" +
    "\uffb6\113\uffb6\114\uffb6\115\uffb6\116\uffb6\117\uffb6\125\uffb6" +
    "\001\002\000\034\077\uffc2\100\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\115\uffc2" +
    "\116\uffc2\117\uffc2\001\002\000\030\010\027\023\017\102" +
    "\014\103\uffe7\110\045\113\037\121\012\122\024\123\032" +
    "\124\022\125\043\001\002\000\026\010\027\023\017\102" +
    "\014\110\045\113\037\121\012\122\024\123\032\124\022" +
    "\125\043\001\002\000\034\077\uffb9\100\uffb9\103\uffb9\104" +
    "\uffb9\105\uffb9\106\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9" +
    "\115\uffb9\116\uffb9\117\uffb9\001\002\000\032\100\uffc6\103" +
    "\uffc6\104\033\105\uffc6\106\uffc6\111\uffc6\112\uffc6\113\uffc6" +
    "\114\uffc6\115\uffc6\116\uffc6\117\uffc6\001\002\000\004\103" +
    "\074\001\002\000\044\077\uffb7\100\uffb7\101\uffb7\102\071" +
    "\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\111\uffb7\112" +
    "\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7\125\uffb7" +
    "\001\002\000\024\103\uffe5\106\066\111\050\112\051\113" +
    "\052\114\055\115\054\116\053\117\047\001\002\000\026" +
    "\010\027\023\017\102\014\110\045\113\037\121\012\122" +
    "\024\123\032\124\022\125\043\001\002\000\030\100\uffc9" +
    "\103\uffc9\105\uffc9\106\uffc9\111\uffc9\112\uffc9\113\uffc9\114" +
    "\uffc9\115\uffc9\116\uffc9\117\uffc9\001\002\000\026\010\027" +
    "\023\017\102\014\110\045\113\037\121\012\122\024\123" +
    "\032\124\022\125\043\001\002\000\026\010\027\023\017" +
    "\102\014\110\045\113\037\121\012\122\024\123\032\124" +
    "\022\125\043\001\002\000\026\010\027\023\017\102\014" +
    "\110\045\113\037\121\012\122\024\123\032\124\022\125" +
    "\043\001\002\000\026\010\027\023\017\102\014\110\045" +
    "\113\037\121\012\122\024\123\032\124\022\125\043\001" +
    "\002\000\026\010\027\023\017\102\014\110\045\113\037" +
    "\121\012\122\024\123\032\124\022\125\043\001\002\000" +
    "\026\010\027\023\017\102\014\110\045\113\037\121\012" +
    "\122\024\123\032\124\022\125\043\001\002\000\026\010" +
    "\027\023\017\102\014\110\045\113\037\121\012\122\024" +
    "\123\032\124\022\125\043\001\002\000\030\100\uffcd\103" +
    "\uffcd\105\uffcd\106\uffcd\111\uffcd\112\uffcd\113\uffcd\114\uffcd" +
    "\115\uffcd\116\uffcd\117\uffcd\001\002\000\030\100\uffcc\103" +
    "\uffcc\105\uffcc\106\uffcc\111\uffcc\112\uffcc\113\uffcc\114\uffcc" +
    "\115\uffcc\116\uffcc\117\uffcc\001\002\000\030\100\uffca\103" +
    "\uffca\105\uffca\106\uffca\111\uffca\112\051\113\052\114\055" +
    "\115\054\116\uffca\117\uffca\001\002\000\030\100\uffce\103" +
    "\uffce\105\uffce\106\uffce\111\uffce\112\uffce\113\uffce\114\055" +
    "\115\054\116\uffce\117\uffce\001\002\000\030\100\uffcf\103" +
    "\uffcf\105\uffcf\106\uffcf\111\uffcf\112\uffcf\113\uffcf\114\055" +
    "\115\054\116\uffcf\117\uffcf\001\002\000\030\100\uffd0\103" +
    "\uffd0\105\uffd0\106\uffd0\111\uffd0\112\051\113\052\114\055" +
    "\115\054\116\053\117\047\001\002\000\030\100\uffcb\103" +
    "\uffcb\105\uffcb\106\uffcb\111\uffcb\112\051\113\052\114\055" +
    "\115\054\116\053\117\uffcb\001\002\000\004\103\uffe8\001" +
    "\002\000\026\010\027\023\017\102\014\110\045\113\037" +
    "\121\012\122\024\123\032\124\022\125\043\001\002\000" +
    "\024\103\uffe5\106\066\111\050\112\051\113\052\114\055" +
    "\115\054\116\053\117\047\001\002\000\004\103\uffe6\001" +
    "\002\000\030\010\027\023\017\102\014\103\uffe7\110\045" +
    "\113\037\121\012\122\024\123\032\124\022\125\043\001" +
    "\002\000\004\103\073\001\002\000\030\100\uffc7\103\uffc7" +
    "\105\uffc7\106\uffc7\111\uffc7\112\uffc7\113\uffc7\114\uffc7\115" +
    "\uffc7\116\uffc7\117\uffc7\001\002\000\034\077\uffc1\100\uffc1" +
    "\103\uffc1\104\uffc1\105\uffc1\106\uffc1\111\uffc1\112\uffc1\113" +
    "\uffc1\114\uffc1\115\uffc1\116\uffc1\117\uffc1\001\002\000\030" +
    "\100\uffc8\103\uffc8\105\uffc8\106\uffc8\111\uffc8\112\uffc8\113" +
    "\uffc8\114\uffc8\115\uffc8\116\uffc8\117\uffc8\001\002\000\026" +
    "\010\027\023\017\102\014\110\045\113\037\121\012\122" +
    "\024\123\032\124\022\125\043\001\002\000\022\100\100" +
    "\111\050\112\051\113\052\114\055\115\054\116\053\117" +
    "\047\001\002\000\042\077\uffb8\100\uffb8\101\uffb8\103\uffb8" +
    "\104\uffb8\105\uffb8\106\uffb8\107\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\125\uffb8\001\002" +
    "\000\006\077\114\102\113\001\002\000\036\077\104\100" +
    "\uffdd\101\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\111\uffdd" +
    "\112\uffdd\113\uffdd\114\uffdd\115\uffdd\116\uffdd\117\uffdd\001" +
    "\002\000\034\100\uffdf\101\110\103\uffdf\104\uffdf\105\uffdf" +
    "\106\uffdf\111\uffdf\112\uffdf\113\uffdf\114\uffdf\115\uffdf\116" +
    "\uffdf\117\uffdf\001\002\000\026\010\027\023\017\102\014" +
    "\110\045\113\037\121\012\122\024\123\032\124\022\125" +
    "\043\001\002\000\022\100\106\111\050\112\051\113\052" +
    "\114\055\115\054\116\053\117\047\001\002\000\036\077" +
    "\104\100\uffdd\101\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd" +
    "\111\uffdd\112\uffdd\113\uffdd\114\uffdd\115\uffdd\116\uffdd\117" +
    "\uffdd\001\002\000\034\100\uffde\101\uffde\103\uffde\104\uffde" +
    "\105\uffde\106\uffde\111\uffde\112\uffde\113\uffde\114\uffde\115" +
    "\uffde\116\uffde\117\uffde\001\002\000\036\100\uffdf\101\110" +
    "\103\uffdf\104\uffdf\105\uffdf\106\uffdf\111\uffdf\112\uffdf\113" +
    "\uffdf\114\uffdf\115\uffdf\116\uffdf\117\uffdf\125\uffdf\001\002" +
    "\000\032\100\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\111" +
    "\uffc5\112\uffc5\113\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5" +
    "\001\002\000\034\100\uffe0\103\uffe0\104\uffe0\105\uffe0\106" +
    "\uffe0\111\uffe0\112\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0" +
    "\117\uffe0\125\uffe0\001\002\000\004\103\120\001\002\000" +
    "\026\010\027\023\017\102\014\110\045\113\037\121\012" +
    "\122\024\123\032\124\022\125\043\001\002\000\022\100" +
    "\116\111\050\112\051\113\052\114\055\115\054\116\053" +
    "\117\047\001\002\000\034\100\uffdf\101\110\103\uffdf\104" +
    "\uffdf\105\uffdf\106\uffdf\111\uffdf\112\uffdf\113\uffdf\114\uffdf" +
    "\115\uffdf\116\uffdf\117\uffdf\001\002\000\032\100\uffc4\103" +
    "\uffc4\104\uffc4\105\uffc4\106\uffc4\111\uffc4\112\uffc4\113\uffc4" +
    "\114\uffc4\115\uffc4\116\uffc4\117\uffc4\001\002\000\034\077" +
    "\uffc0\100\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\111\uffc0" +
    "\112\uffc0\113\uffc0\114\uffc0\115\uffc0\116\uffc0\117\uffc0\001" +
    "\002\000\004\075\122\001\002\000\030\010\027\017\020" +
    "\023\017\045\006\076\ufff8\102\014\121\012\122\024\123" +
    "\032\124\022\125\016\001\002\000\004\125\130\001\002" +
    "\000\004\076\127\001\002\000\030\010\027\017\020\023" +
    "\017\045\006\076\ufff8\102\014\121\012\122\024\123\032" +
    "\124\022\125\016\001\002\000\004\076\ufff9\001\002\000" +
    "\034\002\ufffa\010\ufffa\017\ufffa\023\ufffa\045\ufffa\052\ufffa" +
    "\055\ufffa\102\ufffa\121\ufffa\122\ufffa\123\ufffa\124\ufffa\125" +
    "\ufffa\001\002\000\004\102\131\001\002\000\030\010\027" +
    "\017\020\023\017\045\006\102\014\103\uffeb\121\012\122" +
    "\024\123\032\124\022\125\016\001\002\000\006\103\uffe9" +
    "\106\140\001\002\000\004\125\137\001\002\000\004\103" +
    "\135\001\002\000\004\105\136\001\002\000\030\010\ufff7" +
    "\017\ufff7\023\ufff7\045\ufff7\076\ufff7\102\ufff7\121\ufff7\122" +
    "\ufff7\123\ufff7\124\ufff7\125\ufff7\001\002\000\010\103\uffee" +
    "\105\uffee\106\uffee\001\002\000\026\010\027\017\020\023" +
    "\017\045\006\102\014\121\012\122\024\123\032\124\022" +
    "\125\016\001\002\000\004\103\uffec\001\002\000\006\103" +
    "\uffe9\106\140\001\002\000\004\103\uffea\001\002\000\004" +
    "\002\uffff\001\002\000\004\125\uffe2\001\002\000\004\002" +
    "\000\001\002\000\022\103\150\111\050\112\051\113\052" +
    "\114\055\115\054\116\053\117\047\001\002\000\034\077" +
    "\uffba\100\uffba\103\uffba\104\uffba\105\uffba\106\uffba\111\uffba" +
    "\112\uffba\113\uffba\114\uffba\115\uffba\116\uffba\117\uffba\001" +
    "\002\000\004\125\uffe1\001\002\000\004\102\153\001\002" +
    "\000\030\010\027\017\020\023\017\045\006\102\014\103" +
    "\uffeb\121\012\122\024\123\032\124\022\125\016\001\002" +
    "\000\004\103\155\001\002\000\004\075\156\001\002\000" +
    "\046\003\172\010\027\014\165\017\020\023\017\041\163" +
    "\045\006\066\162\075\156\076\uffda\102\014\110\045\113" +
    "\037\121\012\122\024\123\032\124\022\125\043\001\002" +
    "\000\036\002\uffed\010\uffed\017\uffed\023\uffed\045\uffed\052" +
    "\uffed\055\uffed\076\uffed\102\uffed\121\uffed\122\uffed\123\uffed" +
    "\124\uffed\125\uffed\001\002\000\046\003\uffd9\010\uffd9\014" +
    "\uffd9\017\uffd9\023\uffd9\041\uffd9\045\uffd9\066\uffd9\075\uffd9" +
    "\076\uffd9\102\uffd9\110\uffd9\113\uffd9\121\uffd9\122\uffd9\123" +
    "\uffd9\124\uffd9\125\uffd9\001\002\000\022\105\217\111\050" +
    "\112\051\113\052\114\055\115\054\116\053\117\047\001" +
    "\002\000\004\102\213\001\002\000\026\010\027\023\017" +
    "\102\014\110\045\113\037\121\012\122\024\123\032\124" +
    "\022\125\043\001\002\000\034\077\uffb9\101\110\104\uffb9" +
    "\105\uffb9\107\204\111\uffb9\112\uffb9\113\uffb9\114\uffb9\115" +
    "\uffb9\116\uffb9\117\uffb9\125\uffdf\001\002\000\004\102\177" +
    "\001\002\000\050\003\uffd7\010\uffd7\014\uffd7\017\uffd7\023" +
    "\uffd7\032\uffd7\041\uffd7\045\uffd7\066\uffd7\075\uffd7\076\uffd7" +
    "\102\uffd7\110\uffd7\113\uffd7\121\uffd7\122\uffd7\123\uffd7\124" +
    "\uffd7\125\uffd7\001\002\000\004\105\176\001\002\000\046" +
    "\003\172\010\027\014\165\017\020\023\017\041\163\045" +
    "\006\066\162\075\156\076\uffda\102\014\110\045\113\037" +
    "\121\012\122\024\123\032\124\022\125\043\001\002\000" +
    "\004\076\174\001\002\000\004\105\173\001\002\000\050" +
    "\003\uffd1\010\uffd1\014\uffd1\017\uffd1\023\uffd1\032\uffd1\041" +
    "\uffd1\045\uffd1\066\uffd1\075\uffd1\076\uffd1\102\uffd1\110\uffd1" +
    "\113\uffd1\121\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1\001" +
    "\002\000\056\002\uffdc\003\uffdc\010\uffdc\014\uffdc\017\uffdc" +
    "\023\uffdc\032\uffdc\041\uffdc\045\uffdc\052\uffdc\055\uffdc\066" +
    "\uffdc\075\uffdc\076\uffdc\102\uffdc\110\uffdc\113\uffdc\121\uffdc" +
    "\122\uffdc\123\uffdc\124\uffdc\125\uffdc\001\002\000\004\076" +
    "\uffdb\001\002\000\046\003\uffd8\010\uffd8\014\uffd8\017\uffd8" +
    "\023\uffd8\041\uffd8\045\uffd8\066\uffd8\075\uffd8\076\uffd8\102" +
    "\uffd8\110\uffd8\113\uffd8\121\uffd8\122\uffd8\123\uffd8\124\uffd8" +
    "\125\uffd8\001\002\000\026\010\027\023\017\102\014\110" +
    "\045\113\037\121\012\122\024\123\032\124\022\125\043" +
    "\001\002\000\022\103\201\111\050\112\051\113\052\114" +
    "\055\115\054\116\053\117\047\001\002\000\040\003\172" +
    "\010\027\014\165\023\017\041\163\066\162\075\156\102" +
    "\014\110\045\113\037\121\012\122\024\123\032\124\022" +
    "\125\043\001\002\000\004\032\207\001\002\000\030\077" +
    "\uffb9\104\uffb9\105\uffb9\107\204\111\uffb9\112\uffb9\113\uffb9" +
    "\114\uffb9\115\uffb9\116\uffb9\117\uffb9\001\002\000\026\010" +
    "\027\023\017\102\014\110\045\113\037\121\012\122\024" +
    "\123\032\124\022\125\043\001\002\000\022\105\206\111" +
    "\050\112\051\113\052\114\055\115\054\116\053\117\047" +
    "\001\002\000\050\003\uffd2\010\uffd2\014\uffd2\017\uffd2\023" +
    "\uffd2\032\uffd2\041\uffd2\045\uffd2\066\uffd2\075\uffd2\076\uffd2" +
    "\102\uffd2\110\uffd2\113\uffd2\121\uffd2\122\uffd2\123\uffd2\124" +
    "\uffd2\125\uffd2\001\002\000\040\003\172\010\027\014\165" +
    "\023\017\041\163\066\162\075\156\102\014\110\045\113" +
    "\037\121\012\122\024\123\032\124\022\125\043\001\002" +
    "\000\050\003\uffd6\010\uffd6\014\uffd6\017\uffd6\023\uffd6\032" +
    "\uffd6\041\uffd6\045\uffd6\066\uffd6\075\uffd6\076\uffd6\102\uffd6" +
    "\110\uffd6\113\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6\125" +
    "\uffd6\001\002\000\022\105\212\111\050\112\051\113\052" +
    "\114\055\115\054\116\053\117\047\001\002\000\050\003" +
    "\uffd4\010\uffd4\014\uffd4\017\uffd4\023\uffd4\032\uffd4\041\uffd4" +
    "\045\uffd4\066\uffd4\075\uffd4\076\uffd4\102\uffd4\110\uffd4\113" +
    "\uffd4\121\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4\001\002" +
    "\000\026\010\027\023\017\102\014\110\045\113\037\121" +
    "\012\122\024\123\032\124\022\125\043\001\002\000\022" +
    "\103\215\111\050\112\051\113\052\114\055\115\054\116" +
    "\053\117\047\001\002\000\040\003\172\010\027\014\165" +
    "\023\017\041\163\066\162\075\156\102\014\110\045\113" +
    "\037\121\012\122\024\123\032\124\022\125\043\001\002" +
    "\000\050\003\uffd5\010\uffd5\014\uffd5\017\uffd5\023\uffd5\032" +
    "\uffd5\041\uffd5\045\uffd5\066\uffd5\075\uffd5\076\uffd5\102\uffd5" +
    "\110\uffd5\113\uffd5\121\uffd5\122\uffd5\123\uffd5\124\uffd5\125" +
    "\uffd5\001\002\000\050\003\uffd3\010\uffd3\014\uffd3\017\uffd3" +
    "\023\uffd3\032\uffd3\041\uffd3\045\uffd3\066\uffd3\075\uffd3\076" +
    "\uffd3\102\uffd3\110\uffd3\113\uffd3\121\uffd3\122\uffd3\123\uffd3" +
    "\124\uffd3\125\uffd3\001\002\000\010\026\223\044\222\075" +
    "\221\001\002\000\030\010\027\017\020\023\017\045\006" +
    "\076\uffef\102\014\121\012\122\024\123\032\124\022\125" +
    "\016\001\002\000\004\125\242\001\002\000\004\125\225" +
    "\001\002\000\004\075\230\001\002\000\006\075\ufff2\106" +
    "\226\001\002\000\004\125\225\001\002\000\004\075\ufff3" +
    "\001\002\000\030\010\027\017\020\023\017\045\006\076" +
    "\uffef\102\014\121\012\122\024\123\032\124\022\125\016" +
    "\001\002\000\030\010\027\017\020\023\017\045\006\076" +
    "\uffef\102\014\121\012\122\024\123\032\124\022\125\016" +
    "\001\002\000\004\125\240\001\002\000\004\105\236\001" +
    "\002\000\004\076\235\001\002\000\034\002\ufff4\010\ufff4" +
    "\017\ufff4\023\ufff4\045\ufff4\052\ufff4\055\ufff4\102\ufff4\121" +
    "\ufff4\122\ufff4\123\ufff4\124\ufff4\125\ufff4\001\002\000\030" +
    "\010\027\017\020\023\017\045\006\076\uffef\102\014\121" +
    "\012\122\024\123\032\124\022\125\016\001\002\000\004" +
    "\076\ufff1\001\002\000\006\102\153\105\uffee\001\002\000" +
    "\004\076\ufff0\001\002\000\004\075\243\001\002\000\030" +
    "\010\027\017\020\023\017\045\006\076\uffef\102\014\121" +
    "\012\122\024\123\032\124\022\125\016\001\002\000\004" +
    "\076\245\001\002\000\034\002\ufff5\010\ufff5\017\ufff5\023" +
    "\ufff5\045\ufff5\052\ufff5\055\ufff5\102\ufff5\121\ufff5\122\ufff5" +
    "\123\ufff5\124\ufff5\125\ufff5\001\002\000\004\076\247\001" +
    "\002\000\034\002\ufff6\010\ufff6\017\ufff6\023\ufff6\045\ufff6" +
    "\052\ufff6\055\ufff6\102\ufff6\121\ufff6\122\ufff6\123\ufff6\124" +
    "\ufff6\125\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\030\002\014\003\022\004\024\005\007\006" +
    "\010\014\004\017\006\020\020\030\030\031\027\032\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\150\001\001\000\012\027" +
    "\146\030\040\031\027\032\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\143\004\024\005\007\006" +
    "\010\014\004\017\006\020\020\030\030\031\027\032\012" +
    "\001\001\000\002\001\001\000\004\020\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\027" +
    "\043\030\040\031\027\032\037\033\041\001\001\000\012" +
    "\027\074\030\040\031\027\032\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\064\001\001\000\012\027\045\030\040\031" +
    "\027\032\037\001\001\000\002\001\001\000\012\027\063" +
    "\030\040\031\027\032\037\001\001\000\012\027\062\030" +
    "\040\031\027\032\037\001\001\000\012\027\061\030\040" +
    "\031\027\032\037\001\001\000\012\027\060\030\040\031" +
    "\027\032\037\001\001\000\012\027\057\030\040\031\027" +
    "\032\037\001\001\000\012\027\056\030\040\031\027\032" +
    "\037\001\001\000\012\027\055\030\040\031\027\032\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\066\030" +
    "\040\031\027\032\037\001\001\000\004\034\067\001\001" +
    "\000\002\001\001\000\014\027\043\030\040\031\027\032" +
    "\037\033\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\076\030" +
    "\040\031\027\032\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\102\001\001\000" +
    "\004\021\110\001\001\000\012\027\104\030\040\031\027" +
    "\032\037\001\001\000\002\001\001\000\004\022\106\001" +
    "\001\000\002\001\001\000\004\021\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\114\030\040\031\027\032\037\001\001\000\002\001\001" +
    "\000\004\021\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\123\010\124\017\122" +
    "\020\020\030\030\031\027\032\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\125\010\124\017\122" +
    "\020\020\030\030\031\027\032\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\131" +
    "\015\133\017\132\020\020\030\030\031\027\032\012\001" +
    "\001\000\004\016\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\141\017\132\020\020\030\030\031\027" +
    "\032\012\001\001\000\002\001\001\000\004\016\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\131\015\153" +
    "\017\132\020\020\030\030\031\027\032\012\001\001\000" +
    "\002\001\001\000\004\023\156\001\001\000\030\013\166" +
    "\017\132\020\020\023\165\024\157\025\170\026\167\027" +
    "\160\030\040\031\027\032\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\210\030\040\031\027\032\037\001\001\000\004" +
    "\021\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\013\166\017\132\020\020\023\165" +
    "\024\157\025\174\026\167\027\160\030\040\031\027\032" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\027\177\030\040\031\027\032\037\001\001" +
    "\000\002\001\001\000\016\023\165\024\201\027\160\030" +
    "\040\031\027\032\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\204\030\040\031\027\032\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\165" +
    "\024\207\027\160\030\040\031\027\032\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\213\030\040\031\027\032\037\001\001\000\002\001" +
    "\001\000\016\023\165\024\215\027\160\030\040\031\027" +
    "\032\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\245\013\232\014\230\017\231" +
    "\020\020\030\030\031\027\032\012\001\001\000\002\001" +
    "\001\000\004\011\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\226\001\001\000\002\001\001\000" +
    "\022\012\233\013\232\014\230\017\231\020\020\030\030" +
    "\031\027\032\012\001\001\000\022\012\240\013\232\014" +
    "\230\017\231\020\020\030\030\031\027\032\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\236\013\232\014\230\017\231" +
    "\020\020\030\030\031\027\032\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\012\243\013\232\014\230\017\231\020\020\030" +
    "\030\031\027\032\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$NotQuiteJavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$NotQuiteJavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$NotQuiteJavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private Consumer<SyntaxError> onError;

    public void onError(Consumer<SyntaxError> onError) {
        this.onError = onError;
    }
    

    @Override
    public void syntax_error(Symbol info) {

        List<Integer> expectedTokens = expected_token_ids();
        
        int line, column;
        StringBuilder message = new StringBuilder("Unexpected token ");
        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            line = s.getLeft().getLine();
            column = s.getLeft().getColumn();
            
            message.append(s.getName());
            
            if (s.value != null) {
                message.append("(");
                message.append(s.value);
                message.append(")");
            }
        } else {
            line = cur_token.left;
            column = cur_token.right;
        }
        
        if (!expectedTokens.isEmpty()) {
            message.append(", expected one of the following: ");
            boolean first = true;
            for (int expected : expectedTokens){
                if (!first) {
                    message.append(", ");
                }
                message.append(symbl_name_from_id(expected));
                first = false;
            }
        }
        
        
        SyntaxError err = new SyntaxError(message.toString(), line, column);
        if (onError == null) {
            System.err.println(err);
        } else {
            onError.accept(err);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // ignore
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$NotQuiteJavaParser$actions {
  private final NotQuiteJavaParser parser;

  /** Constructor */
  CUP$NotQuiteJavaParser$actions(NotQuiteJavaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$NotQuiteJavaParser$do_action_part00000000(
    int                        CUP$NotQuiteJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$NotQuiteJavaParser$parser,
    java.util.Stack            CUP$NotQuiteJavaParser$stack,
    int                        CUP$NotQuiteJavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$NotQuiteJavaParser$result;

      /* select the action based on the action number */
      switch (CUP$NotQuiteJavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= topLevelDeclList 
            {
              NQJProgram RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJTopLevelDeclList d = (NQJTopLevelDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = AstHelper.program(d); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJProgram start_val = (NQJProgram)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		RESULT = start_val;
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$NotQuiteJavaParser$parser.done_parsing();
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // topLevelDeclList ::= topLevelDecl topLevelDeclList 
            {
              NQJTopLevelDeclList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJTopLevelDecl d = (NQJTopLevelDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJTopLevelDeclList l = (NQJTopLevelDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.add(0, d); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("topLevelDeclList",1, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // topLevelDeclList ::= 
            {
              NQJTopLevelDeclList RESULT =null;
		 RESULT = TopLevelDeclList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("topLevelDeclList",1, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // topLevelDecl ::= classDecl 
            {
              NQJTopLevelDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJClassDecl c = (NQJClassDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",2, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // topLevelDecl ::= functionDecl 
            {
              NQJTopLevelDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJFunctionDecl f = (NQJFunctionDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = f; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",2, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // topLevelDecl ::= interfaceDecl 
            {
              NQJTopLevelDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJInterfaceDecl i = (NQJInterfaceDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = i;
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",2, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // interfaceDecl ::= INTERFACE ID LBRACE interfaceMemberDeclList RBRACE 
            {
              NQJInterfaceDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJInterfaceFunctionDeclList members = (NQJInterfaceFunctionDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = InterfaceDecl(name,members);
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("interfaceDecl",4, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // interfaceMemberDeclList ::= interfaceMemberDecl interfaceMemberDeclList 
            {
              NQJInterfaceFunctionDeclList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJInterfaceFunctionDecl d = (NQJInterfaceFunctionDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJInterfaceFunctionDeclList l = (NQJInterfaceFunctionDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.add(0,d);
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("interfaceMemberDeclList",5, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // interfaceMemberDeclList ::= 
            {
              NQJInterfaceFunctionDeclList RESULT =null;
		 RESULT = InterfaceFunctionDeclList();
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("interfaceMemberDeclList",5, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // interfaceMemberDecl ::= type ID LPAREN paramList RPAREN SEMI 
            {
              NQJInterfaceFunctionDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).right;
		NQJType type = (NQJType)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJVarDeclList param = (NQJVarDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		 RESULT = InterfaceFunctionDecl(type,name,param);
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("interfaceMemberDecl",6, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classDecl ::= CLASS ID LBRACE memberDeclList RBRACE 
            {
              NQJClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJMemberDeclList members = (NQJMemberDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = AstHelper.classDecl(name, null, NQJ.ImplementsNothing(), members); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("classDecl",3, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classDecl ::= CLASS ID EXTENDS ID LBRACE memberDeclList RBRACE 
            {
              NQJClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		String ext = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJMemberDeclList members = (NQJMemberDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = AstHelper.classDecl(name, ext, NQJ.ImplementsNothing(), members); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("classDecl",3, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classDecl ::= CLASS ID IMPLEMENTS implementsList LBRACE memberDeclList RBRACE 
            {
              NQJClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).value;
		int impleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		NQJImplementsInterfaceList imp = (NQJImplementsInterfaceList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJMemberDeclList members = (NQJMemberDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = AstHelper.classDecl(name, null, imp, members);
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("classDecl",3, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // implementsList ::= ID COMMA implementsList 
            {
              NQJImplementsInterfaceList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJImplementsInterfaceList l = (NQJImplementsInterfaceList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 NQJImplementsInterface inter = ImplementsInterface(i);
        RESULT = l; l.add(0,inter);
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("implementsList",7, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // implementsList ::= ID 
            {
              NQJImplementsInterfaceList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		NQJImplementsInterface inter = ImplementsInterface(i);
        RESULT = ImplementsInterfaceList(inter);
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("implementsList",7, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // memberDeclList ::= varDecl SEMI memberDeclList 
            {
              NQJMemberDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJVarDecl v = (NQJVarDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJMemberDeclList l = (NQJMemberDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.add(0, v); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("memberDeclList",8, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // memberDeclList ::= functionDecl memberDeclList 
            {
              NQJMemberDeclList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJFunctionDecl m = (NQJFunctionDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJMemberDeclList l = (NQJMemberDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.add(0, m); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("memberDeclList",8, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // memberDeclList ::= 
            {
              NQJMemberDeclList RESULT =null;
		 RESULT = MemberDeclList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("memberDeclList",8, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDecl ::= type ID 
            {
              NQJVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJType t = (NQJType)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = VarDecl(t, n); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("varDecl",9, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // functionDecl ::= type ID LPAREN paramList RPAREN block 
            {
              NQJFunctionDecl RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).right;
		NQJType returnType = (NQJType)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJVarDeclList params = (NQJVarDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJBlock body = (NQJBlock)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = FunctionDecl(returnType, name, params, body); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("functionDecl",10, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramList ::= varDecl paramListRest 
            {
              NQJVarDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJVarDecl v = (NQJVarDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJVarDeclList l = (NQJVarDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.addFront(v); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("paramList",11, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramList ::= 
            {
              NQJVarDeclList RESULT =null;
		 RESULT = VarDeclList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("paramList",11, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramListRest ::= COMMA varDecl paramListRest 
            {
              NQJVarDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJVarDecl v = (NQJVarDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJVarDeclList r = (NQJVarDeclList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = r; r.addFront(v); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("paramListRest",12, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramListRest ::= 
            {
              NQJVarDeclList RESULT =null;
		 RESULT = VarDeclList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("paramListRest",12, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exprList ::= expr exprListRest 
            {
              NQJExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExprList l = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.addFront(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprList",25, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exprList ::= 
            {
              NQJExprList RESULT =null;
		 RESULT = ExprList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprList",25, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exprListRest ::= COMMA expr exprListRest 
            {
              NQJExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExprList r = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = r; r.addFront(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprListRest",26, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exprListRest ::= 
            {
              NQJExprList RESULT =null;
		 RESULT = ExprList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprListRest",26, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // baseType ::= BOOLEAN 
            {
              NQJType RESULT =null;
		 RESULT = TypeBool(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("baseType",14, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // baseType ::= INT 
            {
              NQJType RESULT =null;
		 RESULT = TypeInt(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("baseType",14, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= baseType brackets 
            {
              NQJType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJType t = (NQJType)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = AstHelper.buildArrayType(t, b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= exprL brackets 
            {
              NQJType RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExprL l = (NQJExprL)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = AstHelper.buildArrayType(l, b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // brackets ::= LRBRACKET brackets 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = b+1; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("brackets",15, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // brackets ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("brackets",15, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprBrackets ::= LBRACKET expr RBRACKET exprBrackets 
            {
              NQJExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExprList b = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = b; b.addFront(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprBrackets",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprBrackets ::= 
            {
              NQJExprList RESULT =null;
		 RESULT = ExprList(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprBrackets",16, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block ::= LBRACE statementList RBRACE 
            {
              NQJBlock RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJBlock l = (NQJBlock)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = l; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statementList ::= blockStatement statementList 
            {
              NQJBlock RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJStatement s = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJBlock l = (NQJBlock)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = l; l.addFront(s); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statementList",19, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statementList ::= 
            {
              NQJBlock RESULT =null;
		 RESULT = Block(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statementList",19, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // blockStatement ::= statement 
            {
              NQJStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJStatement s = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("blockStatement",20, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // blockStatement ::= varDecl SEMI 
            {
              NQJStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJVarDecl v = (NQJVarDecl)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = v; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("blockStatement",20, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= block 
            {
              NQJStatement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJBlock b = (NQJBlock)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = b; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= IF LPAREN expr RPAREN statement ELSE statement 
            {
              NQJStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).right;
		NQJExpr c = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJStatement t = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJStatement e = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = StmtIf(c, t, e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= WHILE LPAREN expr RPAREN statement 
            {
              NQJStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr c = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJStatement b = (NQJStatement)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = StmtWhile(c, b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= RETURN expr SEMI 
            {
              NQJStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = StmtReturn(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= expr SEMI 
            {
              NQJStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = StmtExpr(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= exprL EQ expr SEMI 
            {
              NQJStatement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		NQJExprL l = (NQJExprL)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = StmtAssign(l, r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= error SEMI 
            {
              NQJStatement RESULT =null;
		 RESULT = Block(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr AND expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, And(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr PLUS expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Plus(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr MINUS expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Minus(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr TIMES expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Times(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr DIV expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Div(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr EQUALS expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Equals(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr LESS expr 
            {
              NQJExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr l = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprBinary(l, Less(), r); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= NEG expr 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprUnary(Negate(), e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= MINUS expr 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = ExprUnary(UnaryMinus(), e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= ID LPAREN exprList RPAREN 
            {
              NQJExpr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExprList args = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = FunctionCall(m, args); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr2 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = e; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr2 ::= NEW baseType exprBrackets brackets 
            {
              NQJExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJType t = (NQJType)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExprList size = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = AstHelper.newArray(t, size, b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr2",22, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr2 ::= NEW ID LBRACKET expr RBRACKET brackets 
            {
              NQJExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr size = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		  NQJExprList l = ExprList();
            l.add(size);
            RESULT = AstHelper.newArray(TypeClass(t),l , b); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr2",22, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr2 ::= expr3 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = e; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr2",22, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr3 ::= expr2 DOT LENGTH 
            {
              NQJExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr a = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		 RESULT = ArrayLength(a); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr3 ::= expr2 DOT ID LPAREN exprList RPAREN 
            {
              NQJExpr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExprList args = (NQJExprList)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = MethodCall(r, m, args); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr3 ::= NEW ID LPAREN RPAREN 
            {
              NQJExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		 RESULT = NewObject(c); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr3 ::= TRUE 
            {
              NQJExpr RESULT =null;
		 RESULT = BoolConst(true); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr3 ::= FALSE 
            {
              NQJExpr RESULT =null;
		 RESULT = BoolConst(false); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr3 ::= NUMBER 
            {
              NQJExpr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = Number(Integer.parseInt(n)); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr3 ::= THIS 
            {
              NQJExpr RESULT =null;
		 RESULT = ExprThis(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr3 ::= NULL 
            {
              NQJExpr RESULT =null;
		 RESULT = ExprNull(); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr3 ::= LPAREN expr RPAREN 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr e = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = e; 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr3 ::= exprL 
            {
              NQJExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		NQJExprL e = (NQJExprL)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = Read(e); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("expr3",23, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exprL ::= expr3 LBRACKET expr RBRACKET 
            {
              NQJExprL RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).right;
		NQJExpr a = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).right;
		NQJExpr i = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-1)).value;
		 RESULT = ArrayLookup(a, i); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprL",24, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exprL ::= ID 
            {
              NQJExprL RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = VarUse(i); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprL",24, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exprL ::= expr2 DOT ID 
            {
              NQJExprL RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).right;
		NQJExpr r = (NQJExpr)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$NotQuiteJavaParser$stack.peek()).value;
		 RESULT = FieldAccess(r, n); 
              CUP$NotQuiteJavaParser$result = parser.getSymbolFactory().newSymbol("exprL",24, ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.elementAt(CUP$NotQuiteJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$NotQuiteJavaParser$stack.peek()), RESULT);
            }
          return CUP$NotQuiteJavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$NotQuiteJavaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$NotQuiteJavaParser$do_action(
    int                        CUP$NotQuiteJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$NotQuiteJavaParser$parser,
    java.util.Stack            CUP$NotQuiteJavaParser$stack,
    int                        CUP$NotQuiteJavaParser$top)
    throws java.lang.Exception
    {
              return CUP$NotQuiteJavaParser$do_action_part00000000(
                               CUP$NotQuiteJavaParser$act_num,
                               CUP$NotQuiteJavaParser$parser,
                               CUP$NotQuiteJavaParser$stack,
                               CUP$NotQuiteJavaParser$top);
    }
}

}
